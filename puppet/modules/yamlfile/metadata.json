{
  "version": "0.1.1",
  "author": "Reid Vandewiele <reid@puppetlabs.com>",
  "dependencies": [
    {
      "version_requirement": ">= 1.1.1",
      "name": "adrien/filemapper"
    }
  ],
  "license": "Apache 2.0",
  "source": "https://github.com/reidmv/puppet-module-yamlfile",
  "description": "type/provider allowing limited manipulation of keys in yaml files as resources",
  "checksums": {
    "lib/puppet/type/yaml_setting.rb": "d268d65539b91ac2197cb21b6f7b6542",
    "Modulefile": "1aec77b3a618ac2ef67dcbcb0e204348",
    "lib/puppet/provider/yaml_setting/mapped.rb": "0c60bc3046c69484e597aecba3b6810d",
    "README.md": "a76ec336393fc2e3cadd1caee1a67aaa"
  },
  "summary": "Puppet provider yaml file manipulation",
  "types": [
    {
      "parameters": [
        {
          "doc": "The name",
          "name": "name"
        },
        {
          "doc": "Set to true for values such as passwords to obfuscate log output",
          "name": "nodisplay"
        }
      ],
      "providers": [
        {
          "doc": "Generic filemapper provider for yaml_setting",
          "name": "mapped"
        }
      ],
      "doc": "    Ensures that a given yaml hash key and value exists within a yaml file.\n    Nested hash keys can be specified by a key-delimited string. Existing\n    data in the target yaml file will be preserved. No guarantees about\n    comments or other formatting/non-functional details.\n\n    Example:\n\n      yaml_setting { 'simple_example':\n        target => '/etc/example.yaml',\n        key    => 'greeting',\n        value  => 'hello',\n      }\n\n      yaml_setting { 'nested_key_example1':\n        target  => '/etc/example.yaml',\n        key     => 'database/username',\n        value   => 'console',\n      }\n\n      yaml_setting { 'nested_key_example2':\n        target  => '/etc/example.yaml',\n        key     => 'database/password',\n        value   => 'passw0rd',\n      }\n\n      yaml_setting { 'nested_key_example3':\n        target  => '/etc/example.yaml',\n        key     => 'one/two/three',\n        type    => 'array',\n        value   => [ 'a', 'b', 'c' ],\n      }\n\n    Result (/etc/example.yaml):\n\n      --- \n        greeting: hello\n        database: \n          username: console\n          password: passw0rd\n        one: \n          two: \n            three: \n              - a\n              - b\n              - c\n\n    In this example, several yaml_settings were specified and the resulting\n    merged hash was created in /etc/example.yaml. If /etc/example.yaml had\n    already contained data, any keys not specified in a yaml_setting resource\n    would be preserved.\n\n",
      "name": "yaml_setting",
      "properties": [
        {
          "doc": "The basic property that the resource should be in.  Valid values are `present`, `absent`.",
          "name": "ensure"
        },
        {
          "doc": "The configuration file in which to place settings",
          "name": "target"
        },
        {
          "doc": "The yaml key",
          "name": "key"
        },
        {
          "doc": "The data type",
          "name": "type"
        },
        {
          "doc": "The value to give the configuration key",
          "name": "value"
        }
      ]
    }
  ],
  "name": "reidmv-yamlfile",
  "project_page": "https://github.com/reidmv/puppet-module-yamlfile"
}